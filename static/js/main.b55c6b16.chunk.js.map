{"version":3,"sources":["components/Card.js","components/CardList.js","components/SearchBox.js","containers/robots.js","containers/App.js","serviceWorker.js","index.js"],"names":["Card","name","username","email","id","className","alt","src","CardList","robots","cardArray","map","user","i","key","SearchBox","searchfield","searchChange","type","placeholder","onChange","App","onSearchChange","event","setState","target","value","state","filteredRobots","this","filter","robots1","toLowerCase","includes","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"+MAeeA,G,KAZH,SAAC,GAA4B,IAA3BC,EAA0B,EAA1BA,KAAKC,EAAqB,EAArBA,SAASC,EAAY,EAAZA,MAAMC,EAAM,EAANA,GACjC,OACC,yBAAKC,UAAW,wDACf,yBAAKC,IAAI,MAAMC,IAAG,+BAA4BH,KAC9C,4BAAKH,GACL,2BAAIC,GACJ,2BAAIC,MCkBQK,EArBA,SAAC,GAAY,IAAXC,EAAU,EAAVA,OAEVC,EAAYD,EAAOE,KAAI,SAACC,EAAKC,GAClC,OACE,kBAAC,EAAD,CAAMC,IAAMD,EACZZ,KAAOQ,EAAOI,GAAGZ,KACjBC,SAAUO,EAAOI,GAAGX,SACpBC,MAAQM,EAAOI,GAAGV,MAClBC,GAAKK,EAAOI,GAAGT,QAKlB,OACC,6BACCM,ICNYK,EAZG,SAAC,GAA6B,EAA5BC,YAA6B,IAAjBC,EAAgB,EAAhBA,aAC/B,OACC,6BACC,2BACAZ,UAAU,gCACVa,KAAK,SACLC,YAAY,sBACZC,SAAWH,MCVDR,EAAS,CACpB,CACEL,GAAI,GACJH,KAAM,kBACNC,SAAU,WACVC,MAAO,kBAET,CACEC,GAAI,GACJH,KAAM,iBACNC,SAAU,OACVC,MAAO,kBAET,CACEC,GAAI,GACJH,KAAM,eACNC,SAAU,QACVC,MAAO,kBAET,CACEC,GAAI,GACJH,KAAM,kBACNC,SAAU,OACVC,MAAO,kBAET,CACEC,GAAI,GACJH,KAAM,eACNC,SAAU,QACVC,MAAO,kBAET,CACEC,GAAI,GACJH,KAAM,iBACNC,SAAU,OACVC,MAAO,kBAET,CACEC,GAAI,GACJH,KAAM,gBACNC,SAAU,SACVC,MAAO,kBAET,CACEC,GAAI,GACJH,KAAM,kBACNC,SAAU,QACVC,MAAO,kBAET,CACEC,GAAI,GACJH,KAAM,gBACNC,SAAU,SACVC,MAAO,kBAET,CACEC,GAAI,IACJH,KAAM,qBACNC,SAAU,iBACVC,MAAO,2BCTIkB,E,kDAxCd,aAAc,IAAD,8BACZ,gBAgBDC,eAAgB,SAACC,GAEhB,EAAKC,SAAS,CAACR,YAAYO,EAAME,OAAOC,SAjBvC,EAAKC,MAAO,CACTlB,OAAQA,EACRO,YAAY,IAJJ,E,qDAyBJ,IAAD,OACDY,EAAiBC,KAAKF,MAAMlB,OAAOqB,QAAO,SAAAC,GAChD,OAAOA,EAAQ9B,KAAK+B,cAAcC,SAAS,EAAKN,MAAMX,YAAYgB,kBAElE,OACA,yBAAK3B,UAAU,MACd,6CACA,kBAAC,EAAD,CAAYY,aAAcY,KAAKP,iBAC/B,kBAAC,EAAD,CAAUb,OAAQmB,S,GAlCHM,aCGEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCTNC,IAASC,OACT,kBAAC,EAAD,MACEC,SAASC,eAAe,SDwHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.b55c6b16.chunk.js","sourcesContent":["import React from 'react';\r\nimport 'tachyons';\r\n\r\nconst Card =({name,username,email,id})=>{\r\n\treturn(\r\n\t\t<div className ='tc bg-light-yellow dib br3 pa3 ma2 grow bw2 shadow-5'>\r\n\t\t\t<img alt='pic' src = {`https://robohash.org/${id}`} />\r\n\t\t\t<h2>{name}</h2>\r\n\t\t\t<p>{username}</p>\r\n\t\t\t<p>{email}</p>\t\t\t\r\n\t\t</div>\r\n\r\n\t);\r\n}\r\n\r\nexport default Card;","import React from 'react';\r\nimport Card from './Card';\r\n\r\n\r\n\r\n\r\nconst CardList=({robots})=>{\r\n\r\n\tconst cardArray = robots.map((user,i)=>{\r\n\t\treturn(\r\n\t\t\t\t<Card key ={i} \r\n\t\t\t\tname ={robots[i].name} \r\n\t\t\t\tusername={robots[i].username} \r\n\t\t\t\temail ={robots[i].email} \r\n\t\t\t\tid= {robots[i].id}/>\r\n\t          );\r\n        });\r\n\r\n\t\r\n\treturn(\r\n\t\t<div>\t\r\n\t\t{cardArray}\t\r\n\t\t</div>\r\n\t);\r\n}\r\n\r\n\r\nexport default CardList;","import React from 'react';\r\nimport 'tachyons';\r\n\r\nconst SearchBox = ({searchfield,searchChange})=>{\r\n\treturn(\r\n\t\t<div>\r\n\t\t\t<input \r\n\t\t\tclassName='pa3 ba b--green bg-light-blue'\r\n\t\t\ttype='search' \r\n\t\t\tplaceholder=\"Enter the robo name\"\r\n\t\t\tonChange ={searchChange}/>\r\n\t\t</div>\r\n\t\t);\r\n}\r\n\r\nexport default SearchBox;","export const robots = [\r\n  {\r\n    id: 11,\r\n    name: 'Shayesha Sharma',\r\n    username: 'Shayeshu',\r\n    email: 'Sharma@abc.com'\r\n  },\r\n  {\r\n    id: 12,\r\n    name: 'Niheera Sharma',\r\n    username: 'Kuhu',\r\n    email: 'Sharma@abc.com'\r\n  },\r\n  {\r\n    id: 13,\r\n    name: 'Megha Sharma',\r\n    username: 'Megha',\r\n    email: 'Sharma@abc.com'\r\n  },\r\n  {\r\n    id: 14,\r\n    name: 'Narendra Sharma',\r\n    username: 'Dadu',\r\n    email: 'Sharma@abc.com'\r\n  },\r\n  {\r\n    id: 15,\r\n    name: 'Madhu Sharma',\r\n    username: 'Madhu',\r\n    email: 'Sharma@abc.com'\r\n  },\r\n  {\r\n    id: 16,\r\n    name: 'Niheera Sharma',\r\n    username: 'Kuhu',\r\n    email: 'Sharma@abc.com'\r\n  },\r\n  {\r\n    id: 17,\r\n    name: 'Shilpi Sharma',\r\n    username: 'Shilpi',\r\n    email: 'Sharma@abc.com'\r\n  },\r\n  {\r\n    id: 18,\r\n    name: 'Shantanu Sharma',\r\n    username: 'Bittu',\r\n    email: 'Sharma@abc.com'\r\n  },\r\n  {\r\n    id: 19,\r\n    name: 'Tinkoo Sharma',\r\n    username: 'Tinkoo',\r\n    email: 'Sharma@abc.com'\r\n  },\r\n  {\r\n    id: 110,\r\n    name: 'Clementina DuBuque',\r\n    username: 'Moriah.Stanton',\r\n    email: 'Rey.Padberg@karina.biz'\r\n  }\r\n];\r\n","import React,{Component} from 'react';\r\nimport CardList from '../components/CardList'\r\nimport 'tachyons';\r\nimport SearchBox from '../components/SearchBox'\r\n//import Scroll from './Scroll'\r\nimport {robots} from './robots'\r\n\r\n\r\n\r\nclass App extends Component{\r\n\tconstructor(){\r\n\t\tsuper()\r\n\t\t\tthis.state ={\r\n\t\t    robots: robots,\r\n\t\t    searchfield:''\t\r\n\t}\r\n\r\n}\r\n\r\n // componentDidMount() {\r\n // \tfetch('https://jsonplaceholder.typicode.com/users')\r\n\t//  \t.then(respose=>{return respose.json()})\r\n\t//  \t.then(users=>{this.setState({robots:users});\r\n // \t});\r\n \t\r\n //}\r\n\r\n onSearchChange =(event)=>{\r\n\r\n \tthis.setState({searchfield:event.target.value})\r\n\t\r\n\t}\r\n\r\n\t\r\n\r\n\trender(){\r\n\t\tconst filteredRobots = this.state.robots.filter(robots1=>{\r\n\t\treturn robots1.name.toLowerCase().includes(this.state.searchfield.toLowerCase());\r\n});\r\n\t\treturn (\r\n\t\t<div className='tc'>\r\n\t\t\t<h2> Sharma Robos</h2>\r\n\t\t\t<SearchBox  searchChange={this.onSearchChange} />\r\n\t\t\t<CardList robots={filteredRobots}/>\t\t\t\r\n\t\t</div>\r\n\t);\r\n\t}\r\n}\r\n\r\n\r\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\n\nimport App from './containers/App';\nimport * as serviceWorker from './serviceWorker';\nimport 'tachyons';\n\n\nReactDOM.render(\n<App />,  \n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}